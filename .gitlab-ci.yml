#
#  GitLab CI/CD configuration file
#   This file describes how to build and test our projects
#   You probably shouldn't edit this one for the CptS223 class
#   More information on GitLab CI/CD is here:
#      https://docs.gitlab.com/ce/ci/yaml/
#
#  Copyright 2018
#  Contributors:
#    Aaron S. Crandall <acrandal@wsu.edu>
#

# Default Docker image is Alpine Linux's latest release
#  Each job in the pipeline will run in a separate Alpine Linux environment
image: alpine:latest

# Defining the two stages for this CI pipeline
#  Stage 1 - build the software, Stage 2 - test the software
stages:
   - build
   - test
           
# This is the job template which each assignment will extend to run its build
.build:
    stage: build
    before_script:
        - apk add --update g++ make
    script:
        - cd $ASSIGNMENT_DIR
        - make build
    allow_failure: true
    tags:
        - linux
        - docker

# This is the job template which each assignment will extend to run its tests
.test:
    stage: test
    before_script:
        - echo "http://dl-3.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories
        - echo "http://dl-3.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
        - apk add --update g++ make gmock gtest gtest-dev bash
    script:
        - cd $ASSIGNMENT_DIR
        # This list is sorted. Assume there is a job for each test task
        # (Most importantly that there are no excess jobs).
        - >-
            bash -c 'TEST_TARGETS=($(make list)) &&
            make ${TEST_TARGETS[$((${CI_NODE_INDEX:-1} - 1))]}'
    tags:
        - linux
        - docker
                
# This is the job template each assignment could extend to run its test coverage
.coverage:
    stage: test
    before_script:
        - echo "http://dl-3.alpinelinux.org/alpine/edge/main" >> /etc/apk/repositories
        - echo "http://dl-3.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
        - apk add --update g++ make gmock gtest gtest-dev lcov gcovr
    script:
        - cd $ASSIGNMENT_DIR
        - make coverage
        # Output the coverage percentages to the console for parsing
        - gcovr -r .
    tags:
        - linux
        - docker
    artifacts:
        paths:
            - $ASSINGMENT_DIR/coverage_report
    coverage: '^TOTAL.*\s+(\d+\%)$'

# MA1 is the Hello World assignment
MA1-build:
    extends: .build
    variables:
        ASSIGNMENT_DIR: "MA1"

MA1-test:
    extends: .test
    variables:
        ASSIGNMENT_DIR: "MA1"

#MA1-coverage:
#  extends: .coverage
#  variables:
#    ASSIGNMENT_DIR: "MA1"
# MA1 End of Hello World

#******************************** MA2 ****************************#
# MA2 is the Big Five assignment
MA2-BigFive-build:
    extends: .build
    variables:
        ASSIGNMENT_DIR: "MA2-BigFive"

MA2-BigFive-test:
    extends: .test
    variables:
        ASSIGNMENT_DIR: "MA2-BigFive"
    parallel: 6
# END of MA2 - Big Five assignment

#******************************** MA3 ****************************#
# MA3 is the BST Level Order (and Big Five) project
MA3-BSTLevelOrder-build:
  stage: build
  script:
    - cd MA3-BSTLevelOrder
    - make build
  allow_failure: true
  tags:
    - linux
    - docker

# Run the starter code tests
MA3-BSTLevelOrder-starter-tests:
  stage: starter-tests
  script:
    - cd MA3-BSTLevelOrder
    - make starter-tests
  tags:
    - linux
    - docker

# Run the base code tests
MA3-BSTLevelOrder-base-tests:
  stage: base-tests
  script:
    - cd MA3-BSTLevelOrder
    - make base-tests
  allow_failure: true
  tags:
    - linux
    - docker
# END of MA3 - BST Level Order (and Big Five) project
